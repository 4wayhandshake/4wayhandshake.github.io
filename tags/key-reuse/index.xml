<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Key Reuse on 4wayhandshake</title>
    <link>http://4wayhandshake.local:1313/tags/key-reuse/</link>
    <description>Recent content in Key Reuse on 4wayhandshake</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 20 Feb 2024 12:49:00 +0000</lastBuildDate>
    <atom:link href="http://4wayhandshake.local:1313/tags/key-reuse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Last Dance</title>
      <link>http://4wayhandshake.local:1313/ctf/the-last-dance/__index/</link>
      <pubDate>Tue, 20 Feb 2029 00:00:00 +0000</pubDate>
      <guid>http://4wayhandshake.local:1313/ctf/the-last-dance/__index/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;INTRODUCTION&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;The Last Dance&lt;/em&gt; is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. It is an example of a very common cryptography lesson that illustrates why you &lt;em&gt;should never re-use the same key when encrypting two messages&lt;/em&gt;. In this case, the &amp;ldquo;key&amp;rdquo; is actually a key/nonce pair, but that&amp;rsquo;s irrelevant to the solution. By recognizing three things, the player should find a solution pretty quickly:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;CHACHA20&amp;rdquo; is a stream cipher.&lt;/li&gt;&#xA;&lt;li&gt;It utilizes XOR (which is reversible) to encrypt and decrypt.&lt;/li&gt;&#xA;&lt;li&gt;The same key (and nonce) were used to encrypt two messages, with known plaintext for one of them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;first-take&#34;&gt;FIRST TAKE&lt;/h2&gt;&#xA;&lt;p&gt;This challenge provides two files: a python script and a text file with three lines hex data. It looks like the python script, &lt;code&gt;source.py&lt;/code&gt;, was used to generate the encrypted text, &lt;code&gt;out.txt&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

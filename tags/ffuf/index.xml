<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ffuf on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/ffuf/</link><description>Recent content in Ffuf on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 21 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/ffuf/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP Verb Testing</title><link>https://4wayhandshake.github.io/strategy/http-verb-testing/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/http-verb-testing/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="http-verbs">HTTP Verbs&lt;/h3>
&lt;p>Every HTTP request starts with a single word. 99% of the time, it&amp;rsquo;s either &lt;code>GET&lt;/code> or &lt;code>POST&lt;/code>. If you&amp;rsquo;ve ever programmed a REST API, perhaps you&amp;rsquo;ve also used &lt;code>PUT&lt;/code> and &lt;code>DELETE&lt;/code>. Here&amp;rsquo;s the request your browser made when visiting my website:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">GET&lt;/span> https://4wayhandshake.github.io/ &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">4wayhandshake.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User-Agent&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept-Language&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">en-US,en;q=0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DNT&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connection&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">keep-alive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Upgrade-Insecure-Requests&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-Dest&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">document&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-Mode&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">navigate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-Site&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">none&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-User&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">?1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-GPC&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The full list of HTTP verbs is as follows:&lt;/p></description></item><item><title>Server-side Request Forgery (SSRF)</title><link>https://4wayhandshake.github.io/strategy/ssrf/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/ssrf/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="why-write-this">Why write this?&lt;/h3>
&lt;p>I often forget small steps about testing SSRF. It&amp;rsquo;d be good to have a checklist to remind myself of things to investigate when I find an opportunity for SSRF.&lt;/p>
&lt;p>This is &lt;em>by no means comprehensive&lt;/em>. If you want a longer and more detailed guide, I recommend the &lt;a href="https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery">Hacktricks page&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmiro.medium.com%2Fv2%2Fresize%3Afit%3A1200%2F1*I_x0DdXYVVl__XtvaCgg3Q.png&amp;amp;f=1&amp;amp;nofb=1&amp;amp;ipt=d77ce114bcb7dcd2c1b10a99a4176d4a2a75da3089753efdc16fa4118cbf4097&amp;amp;ipo=images" alt="SSRF">&lt;/p>
&lt;h2 id="address-filter-bypass">ADDRESS FILTER BYPASS&lt;/h2>
&lt;p>Even if an SSRF vulnerability is present, any half-decent web app will still filter the addresses that can be requested via the SSRFable component. Usually, these constaints are introduced to force the user of the web app to:&lt;/p></description></item><item><title>Login Forms</title><link>https://4wayhandshake.github.io/strategy/login-forms/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/login-forms/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>The moment you encounter a login form can be magical: there are so many possibilities at your fingertips&amp;hellip; did they leave some &lt;em>default credentials&lt;/em> on the system? Is there an &lt;em>SSRF&lt;/em>? Maybe there&amp;rsquo;s a way to &lt;em>bypass authentication&lt;/em> completely?&lt;/p>
&lt;p>Having so many options can be both a blessing and a curse. It can be a little daunting to have to keep so many techniques in mind, and to keep your eyes open for evidence of the form&amp;rsquo;s vulnerability to each. In an effort to keep your efforts focused and heading in the right direction, I&amp;rsquo;m writing this &lt;a href="https://4wayhandshake.github.io/strategy/">strategy&lt;/a> of my favorite techniques to try on login forms.&lt;/p></description></item><item><title>Web Enumeration</title><link>https://4wayhandshake.github.io/strategy/web-enumeration/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/web-enumeration/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="why-write-this">Why write this?&lt;/h3>
&lt;p>Lately, I&amp;rsquo;ve settled into a pretty good set of web enumeration techniques. As I&amp;rsquo;ve been writing more and more &lt;a href="https://4wayhandshake.github.io/walkthrough/">walkthroughs&lt;/a>, it has started feeling quite repetetive always writing about the same web enumeration strategy. Why not skip that whole song-and-dance, and write it on a separate page that I can link to?&lt;/p>
&lt;p>Most importantly, &lt;em>I like having a convenient reference for myself: it really speeds up recon on a box when you have exactly the right enumeration commands at your fingertips&lt;/em>. This way, I don&amp;rsquo;t have to spend any time formulating the perfect &lt;code>ffuf&lt;/code> command; I can just copy-paste from my previous work.&lt;/p></description></item></channel></rss>
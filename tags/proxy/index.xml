<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proxy on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/proxy/</link><description>Recent content in Proxy on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 05 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/proxy/index.xml" rel="self" type="application/rss+xml"/><item><title>Tunneling with Ligolo-ng</title><link>https://4wayhandshake.github.io/strategy/tunneling-with-ligolo-ng/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/tunneling-with-ligolo-ng/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>A few times before, I&amp;rsquo;ve had woes about my proxying/tunneling system. Traditionally, I&amp;rsquo;ve used either of these solutions when trying to access internally-listening services on the target:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>ssh -L&lt;/code>&lt;/strong> forwarding individual ports
(great if you already have credentials for SSH)&lt;/li>
&lt;li>&lt;strong>&lt;code>SOCKS5&lt;/code>&lt;/strong> proxy over &lt;strong>&lt;code>chisel&lt;/code>&lt;/strong>
(great if you have a reverse shell but no credentials, or want to &amp;ldquo;forward&amp;rdquo; all ports at once)&lt;/li>
&lt;/ul>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>However, when trying to access internally-facing &lt;em>websites&lt;/em>, I&amp;rsquo;ve often had problems with using a &lt;code>SOCKS5&lt;/code> proxy.&lt;/p></description></item><item><title>Buff</title><link>https://4wayhandshake.github.io/walkthrough/buff/</link><pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/buff/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Buff&lt;/em> is the third Windows box in my “Let’s brush up on Windows!” series. For the previous one, see &lt;a href="https://4wayhandshake.github.io/walkthrough/netmon/">my walkthrough on &lt;em>Netmon&lt;/em>&lt;/a>. This box houses a web app for a fictional gym / fitness center. It&amp;rsquo;s fairly easy, but requires good Windows enumeration fundamentals. Following any reasonable pentest checklist will secure a victory on this box.&lt;/p>
&lt;p>Recon is fairly unimportant with &lt;em>Buff&lt;/em>. Foothold is achieved with hardly more than a few clicks and a CVE, and leads directly to the user flag. The root flag is a little more challenging, requiring some local enumeration on the box and application of another CVE. The solution is fairly straightforward: just stick to your checklists and you&amp;rsquo;ll grab that root flag quickly.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Broken API on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/broken-api/</link><description>Recent content in Broken API on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sat, 01 Jul 2023 10:58:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/broken-api/index.xml" rel="self" type="application/rss+xml"/><item><title>Intentions</title><link>https://4wayhandshake.github.io/walkthrough/intentions/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/intentions/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Intentions was released on July 1, 2023 as the third box in &lt;em>Hackers Clash Open Beta Season II&lt;/em>. It is a website that functions as an online image gallery. Users are also able to apply fancy &lt;em>effects&lt;/em> to images within the gallery. This box comes with cute animals, food pics, and a painfully difficult foothold. Achieving the user flag after foothold is relatively straightforward but reinforces some good hacking fundamentals. The root flag is quick, but requires wrapping your head around some cryptography concepts and formulating a customized solution to overcome the problem.&lt;/p></description></item><item><title>baby todo or not todo</title><link>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a docker container, coming packaged with a zip of all of the whole docker container (it&amp;rsquo;s a &amp;ldquo;white box&amp;rdquo; challenge.)&lt;/p>
&lt;p>Open up the source code and read through it, get a sense of how the app is supposed to work. The name of the folder indicates &amp;ldquo;broken authentication control&amp;rdquo;, so that&amp;rsquo;s probably where this is headed.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>The db file &lt;strong>schema.sql&lt;/strong> is the first file to read. I find it&amp;rsquo;s easiest to get a handle on how an app works if you can see how the data is stored. The schema reveals what we should find once we do open the database. Once the website is running, the flag will be present in the table &lt;strong>todos&lt;/strong> (in the &lt;strong>name&lt;/strong> field) with assignee = admin&lt;/p></description></item><item><title>baby WAFfles order</title><link>https://4wayhandshake.github.io/ctf/baby-waffles-order/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-waffles-order/</guid><description>&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Download the challenge files: it is a docker, showing you the source code for the whole challenge.&lt;/p>
&lt;blockquote>
&lt;p>Obvious hint: the title of the website is &lt;strong>&lt;u>xxe&lt;/u>&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/baby-waffles-order/screenshot.png" alt="screenshot">&lt;/p>
&lt;p>Read all the source code, understand how the web app works. In essence, the challenge is an order-taking API for a fictional restaurant, taking orders for either &lt;strong>Ice Scream&lt;/strong> or &lt;strong>WAFfles&lt;/strong>. Orders may be submitted to /api/order as:&lt;/p>
&lt;ul>
&lt;li>application/json&lt;/li>
&lt;li>application/xml&lt;/li>
&lt;/ul>
&lt;h2 id="converting-request-to-xml">CONVERTING REQUEST TO XML&lt;/h2>
&lt;p>It appears that the website is configured to submit orders as json, but the endpoint will still accept xml. Try running the docker and interacting with it: submit an order and catch the request in Burp. The POST will have content-type application/json, but go ahead and convert it to the equivalent XML request:&lt;/p></description></item></channel></rss>
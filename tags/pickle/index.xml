<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pickle on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/pickle/</link><description>Recent content in Pickle on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 24 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/pickle/index.xml" rel="self" type="application/rss+xml"/><item><title>Spellbound Servants</title><link>https://4wayhandshake.github.io/ctf/spellbound-servants/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spellbound-servants/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>I&amp;rsquo;m not quite sure about the description on this one&amp;hellip; To me, it just looks like a partially-finished storefront &amp;#x1f602;&lt;/p>
&lt;p>As long as you don&amp;rsquo;t get too bogged-down with all the Flask-related code, this challenge is really easy. A bit of code analysis leads directly to the solution, which involves only a single step of deserialization to accomplish. Besides the vulnerability, this challenge presents a great example of writing a clean &amp;amp; tidy Flask server.&lt;/p></description></item><item><title>C O P</title><link>https://4wayhandshake.github.io/ctf/c-o-p/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/c-o-p/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>C O P&lt;/em> (Cult of Pickles) is an Easy web challenge, involving requireing equal portions of SQLi, and deserialization, and brine. The challenge is a very minimal web app, demonstrating a bit of a &amp;ldquo;toy problem&amp;rdquo; with SQLi arising from a failure to use SQL prepared statements and sloppy Flask+Jinja2 templating code.&lt;/p>
&lt;p>Achieving actual RCE is a bit challenging, but mostly because of a very strange issue. Formulation of your attack steps and writing the exploit is not too bad. Be sure to read my &lt;a href="https://4wayhandshake.github.io/ctf/c-o-p/#finish-the-exploit-script">warnings&lt;/a> within the Exploit section to avoid my pitfalls.&lt;/p></description></item><item><title>Blurry</title><link>https://4wayhandshake.github.io/walkthrough/blurry/</link><pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/blurry/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Blurry&lt;/em> was released as the eighth box in HTB&amp;rsquo;s Season V, &lt;em>Anomalies&lt;/em>. This box is all about attacking an AI/ML platform called &lt;code>ClearML&lt;/code>. &lt;code>ClearML&lt;/code> is a system for orchestrating various AI/ML platforms, running models and experiments on a remote server. It has an extensive Python API, which we use repeatedly while solving this box. This box is on the easier side of &amp;ldquo;medium&amp;rdquo;, but was still a reasonable challenge.&lt;/p></description></item></channel></rss>
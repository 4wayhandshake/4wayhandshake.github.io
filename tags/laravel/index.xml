<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/laravel/</link><description>Recent content in Laravel on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 19 Apr 2024 00:00:01 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>Usage</title><link>https://4wayhandshake.github.io/walkthrough/usage/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/usage/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Usage&lt;/em> was released in the short period between HTB&amp;rsquo;s Season 4 and Season 5. The target is a server hosting a small blog and a set of administrative tools to manage the server. Also, the target features pretty cool little monitoring tool called &lt;strong>Monit&lt;/strong>, and seemingly also clamAV (although it didn&amp;rsquo;t factor into the attack).&lt;/p>
&lt;p>Foothold is the hardest part of &lt;em>Usage&lt;/em>. After carefully examining the target and doing web enumeration on it, one only comes to the conclusion that the attack surface is quite small. However, the few interactive elements that are present do indeed have a vulnerability. It&amp;rsquo;s surprising, considering the site runs on Laravel, but the password reset form can be exploited through SQL injection. Some careful usage of &lt;code>sqlmap&lt;/code> will do wonders here.&lt;/p></description></item><item><title>Horizontall (images only)</title><link>https://4wayhandshake.github.io/walkthrough/horizontall/</link><pubDate>Thu, 28 Apr 2022 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/horizontall/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This walkthrough is just a series of screenshots showing how I got through the box. 🤷‍♂ I did this box before I really worked out a process for recording my work effectively. Sorry!&lt;/p>
&lt;p>If I find the time, I&amp;rsquo;ll come back to this and try to document it properly.&lt;/p>
&lt;h2 id="walkthrough">Walkthrough&lt;/h2>
&lt;p>These are the notes I left for myself:&lt;/p>
&lt;pre tabindex="0">&lt;code>Found login page at http://api-prod.horizontall.htb/admin/auth/login

I could brute-force the login just with ffuf
Or I could try using the OpenSSH user enumeration CVE to obtain a list of users first?

The successful exploit was from https://github.com/dasithsv/CVE-2019-19609
I simply modified the port, (opened the firewall), set up a nc listener and got a shell
rhost was api-prod.horizontall.htb
lhost was 10.10.14.45
jwt was simply the jwt from my logged-in admin session (got it from firefox web dev tools)
url was http://api-prod.horizontall.htb/
&lt;/code>&lt;/pre>&lt;p>This is the exploit I used:&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Analysis on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/code-analysis/</link><description>Recent content in Code Analysis on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 24 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/code-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Spellbound Servants</title><link>https://4wayhandshake.github.io/ctf/spellbound-servants/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spellbound-servants/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>I&amp;rsquo;m not quite sure about the description on this one&amp;hellip; To me, it just looks like a partially-finished storefront &amp;#x1f602;&lt;/p>
&lt;p>As long as you don&amp;rsquo;t get too bogged-down with all the Flask-related code, this challenge is really easy. A bit of code analysis leads directly to the solution, which involves only a single step of deserialization to accomplish. Besides the vulnerability, this challenge presents a great example of writing a clean &amp;amp; tidy Flask server.&lt;/p></description></item></channel></rss>
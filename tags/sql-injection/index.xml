<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL Injection on 4wayhandshake</title><link>https://4wayhandshake.github.io/tags/sql-injection/</link><description>Recent content in SQL Injection on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 23 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/tags/sql-injection/index.xml" rel="self" type="application/rss+xml"/><item><title>C O P</title><link>https://4wayhandshake.github.io/ctf/c-o-p/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/c-o-p/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>C O P&lt;/em> (Cult of Pickles) is an Easy web challenge, involving requireing equal portions of SQLi, and deserialization, and brine. The challenge is a very minimal web app, demonstrating a bit of a &amp;ldquo;toy problem&amp;rdquo; with SQLi arising from a failure to use SQL prepared statements and sloppy Flask+Jinja2 templating code.&lt;/p>
&lt;p>Achieving actual RCE is a bit challenging, but mostly because of a very strange issue. Formulation of your attack steps and writing the exploit is not too bad. Be sure to read my &lt;a href="https://4wayhandshake.github.io/ctf/c-o-p/#finish-the-exploit-script">warnings&lt;/a> within the Exploit section to avoid my pitfalls.&lt;/p></description></item><item><title>MonitorsThree</title><link>https://4wayhandshake.github.io/walkthrough/monitorsthree/</link><pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/monitorsthree/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>MonitorsThree&lt;/em> was released as the fourth box of HTB&amp;rsquo;s season 6, &lt;em>Heist&lt;/em>. It&amp;rsquo;s an interesting addition to the &amp;ldquo;Monitors&amp;rdquo; line of boxes, all of which prominently feature the &lt;strong>Cacti&lt;/strong> monitoring tool. This box took a little bit of research to complete, but was generally on the easier side of &amp;ldquo;medium&amp;rdquo;.&lt;/p>
&lt;p>Recon was almost nonessential. Once you discover the &lt;code>cacti&lt;/code> subdomain, you&amp;rsquo;re ready to proceed. Fingerprint the two apps you&amp;rsquo;ve discovered, then check out the main &lt;code>monitorsthree&lt;/code> app in more detail. The site has a couple forms on it; running a popular tool to abuse these forms is enough to get you started on a foothold. From there, you&amp;rsquo;ll discover a credential leading you back to the &lt;code>cacti&lt;/code> web app. A little bit of vulnerability research goes a long way here. By exploiting a well known vulnerability (with well-documented PoC), you&amp;rsquo;ll gain an easy foothold.&lt;/p></description></item><item><title>Zipping</title><link>https://4wayhandshake.github.io/walkthrough/zipping/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/zipping/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Zipping&lt;/em> was released just minutes ago. It was released as the tenth box for HTB&amp;rsquo;s &lt;em>Hackers Clash: Open Beta Season II&lt;/em>. The box features a fictional e-commerce site (of what some might call a &amp;ldquo;lifestyle brand&amp;rdquo; *groan*). But good news - they&amp;rsquo;re hiring! With the ability to upload your CV, get ready for some file upload shenanigans.&lt;/p>
&lt;p>After initial entry, you&amp;rsquo;re presented with a very fun little reverse engineering / binex challenge. A firm grasp on linux and C fundamentals will be a huge asset for gaining the root flag. Privilege escalation was a real treat! Have fun &amp;#x1f44b;&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Challenge on 4wayhandshake</title><link>https://4wayhandshake.github.io/categories/challenge/</link><description>Recent content in Challenge on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 12 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/categories/challenge/index.xml" rel="self" type="application/rss+xml"/><item><title>Alphascii Clashing</title><link>https://4wayhandshake.github.io/ctf/alphascii-clash/</link><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/alphascii-clash/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge was super easy - I saw the vulnerability right away. Instead of just finishing it quickly, I thought I&amp;rsquo;d get around to doing something that has been on my To-Do list for &lt;em>far too long&lt;/em>:&lt;/p>
&lt;p>&lt;em>&lt;strong>Finally learning to use Pwntools for CTFs&lt;/strong>&lt;/em> &amp;#x1f480;&lt;/p>
&lt;p>Usually, I just write socket code. However, I&amp;rsquo;ve noticed that this is clearly the &amp;ldquo;slow&amp;rdquo; way to do things. If I&amp;rsquo;m going to go faster in future CTFs, I&amp;rsquo;ll need to use some libraries to speed up my coding!&lt;/p></description></item><item><title>Armaxis</title><link>https://4wayhandshake.github.io/ctf/armaxis/</link><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/armaxis/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Starting the challenge, we&amp;rsquo;re given two ports, corresponding to two components: a website and an web-based email client. The website presents a simple login/registration form, and the email client brings us straight into an inbox without any authentication:&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/armaxis/email.png" alt="email">&lt;/p>
&lt;p>A quick skim through the website code suggests that this email client will probably be used for password resets.&lt;/p>
&lt;h2 id="code-analysis">CODE ANALYSIS&lt;/h2>
&lt;p>As usual, I like to read through the code sequentially, starting from startup/initialization code (the &lt;code>Dockerfile&lt;/code>, then &lt;code>index.js&lt;/code>, etc) and ending with the &lt;code>views&lt;/code>. Thankfully, this one didn&amp;rsquo;t take a lot of reading before I discovered a couple vulnerable sections of code &amp;#x1f913;&lt;/p></description></item><item><title>Spellbound Servants</title><link>https://4wayhandshake.github.io/ctf/spellbound-servants/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spellbound-servants/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>I&amp;rsquo;m not quite sure about the description on this one&amp;hellip; To me, it just looks like a partially-finished storefront &amp;#x1f602;&lt;/p>
&lt;p>As long as you don&amp;rsquo;t get too bogged-down with all the Flask-related code, this challenge is really easy. A bit of code analysis leads directly to the solution, which involves only a single step of deserialization to accomplish. Besides the vulnerability, this challenge presents a great example of writing a clean &amp;amp; tidy Flask server.&lt;/p></description></item><item><title>C O P</title><link>https://4wayhandshake.github.io/ctf/c-o-p/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/c-o-p/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>C O P&lt;/em> (Cult of Pickles) is an Easy web challenge, involving requireing equal portions of SQLi, and deserialization, and brine. The challenge is a very minimal web app, demonstrating a bit of a &amp;ldquo;toy problem&amp;rdquo; with SQLi arising from a failure to use SQL prepared statements and sloppy Flask+Jinja2 templating code.&lt;/p>
&lt;p>Achieving actual RCE is a bit challenging, but mostly because of a very strange issue. Formulation of your attack steps and writing the exploit is not too bad. Be sure to read my &lt;a href="https://4wayhandshake.github.io/ctf/c-o-p/#finish-the-exploit-script">warnings&lt;/a> within the Exploit section to avoid my pitfalls.&lt;/p></description></item><item><title>POP Restaurant</title><link>https://4wayhandshake.github.io/ctf/pop-restaurant/</link><pubDate>Mon, 22 Jan 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/pop-restaurant/</guid><description>&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/pop-restaurant/login%20page.png" alt="login page">&lt;/p>
&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>POP Restaurant&lt;/em>, by @&lt;a href="https://app.hackthebox.com/users/1051133">khanhhnahk1&lt;/a>, is an excellent demonstration of why secure coding practices are important. As is hinted by the name, we utilize a PHP &lt;em>POP chain&lt;/em> to execute arbitrary PHP on the target.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>&amp;#x1f60d; This UI is &lt;em>adorbs&lt;/em>.&lt;/p>
&lt;p>It&amp;rsquo;s a PHP-based web app. Besides the database interfacing code, everything looks like it&amp;rsquo;s entirely custom.&lt;/p>
&lt;p>We can register a user, then start placing &amp;ldquo;orders&amp;rdquo; to the restaurant. We can order pizza, icecream, or spaghetti. Once we click one of the order buttons, our order appears in the pane below:&lt;/p></description></item><item><title>Spookifier</title><link>https://4wayhandshake.github.io/ctf/spookifier/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spookifier/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Spookifier&lt;/em> is an excellent introduction to a very fun class of web vulnerabilities. It makes for a nice little &amp;ldquo;coffee break&amp;rdquo; challenge. Perfect if you don&amp;rsquo;t have much time.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Start by downloading the files. It&amp;rsquo;s a docker container with a Flask application inside. Read the code, and realize there&amp;rsquo;s only one endpoint inside.&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;strong>Python Flask&lt;/strong> server and uses &lt;strong>Mako&lt;/strong> as a template engine.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/spookifier/challenge%20dir.png" alt="challenge dir">&lt;/p></description></item><item><title>Spookypass</title><link>https://4wayhandshake.github.io/ctf/spookypass/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spookypass/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Super easy challenge. This challenge introduces a beginner at reversing into opening their tools and checking inside a file.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Start by downloading the file. We can check &lt;code>file&lt;/code> to see the file type:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>./pass: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3008217772cc2426c643d69b80a96c715490dd91, for GNU/Linux 4.4.0, not stripped&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>Try running the executable. It presents you with a simple prompt, asking the password:&lt;/p></description></item><item><title>PDFy</title><link>https://4wayhandshake.github.io/ctf/pdfy/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/pdfy/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>PDFy&lt;/em> is a web challenge by the prolific @makelaris. It&amp;rsquo;s about exploiting a known vulnerability in the &lt;code>wkhtmltopdf&lt;/code> application - a solution for parsing HTML and printing it into a PDF using a built-in stylesheet. Since we know the goal of this challenge was to disclose a file, it&amp;rsquo;s not overly challenging to find a vulnerability to suit our needs.&lt;/p>
&lt;p>By far, the biggest obstacle on &lt;em>PDFy&lt;/em> is overcoming the lack of a VPN connection. This one requires you to host a resource on the public internet - something that has been a huge roadblock for me in the past, on other challenges and CTF competitions. This challenge forced me to explore what tools exist for getting around the lack of VPN (without using a leased VPS). Ultimately, I settled on a paid subscription to &lt;strong>Pinggy&lt;/strong>, which I&amp;rsquo;m glad I got.&lt;/p></description></item><item><title>Insomnia</title><link>https://4wayhandshake.github.io/ctf/insomnia/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/insomnia/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Insomnia&lt;/em> is a web challenge about bypassing a login mechanism. All source code is provided, and proper analysis of the code will yield the solution. It took me longer than I care to admit to solve this one, but frankly this challenge is more on the easier side of &amp;ldquo;Easy&amp;rdquo;. Anyone that has any experience programming an authentication mechanism will see the flaw with minimal effort. Once it&amp;rsquo;s found, exploiting this flaw is trivial, and the flag can be obtained in a single web request.&lt;/p></description></item><item><title>Simple Encryptor</title><link>https://4wayhandshake.github.io/ctf/simple-encryptor/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/simple-encryptor/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is about decrypting a file that was created with a flawed form of encryption. We are provided the encrypted file, and also the encryption program. The program can easily be disassembled to examine how it functions. The code is very small, and thankfully the vulnerability is easy to locate. However, even after locating the flaw, a proper solution requires a little bit of C coding, which can be somewhat daunting.&lt;/p></description></item><item><title>Baby Time Capsule</title><link>https://4wayhandshake.github.io/ctf/baby-time-capsule/</link><pubDate>Wed, 21 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-time-capsule/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Baby Time Capsule&lt;/em> is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. Personally, I am not accustomed to crypto challenges, and found this one a lot more difficult than &amp;ldquo;very easy&amp;rdquo;. However, the solution only requires a very textbook attack. Anyone well-versed with RSA already should find it relatively simple.&lt;/p>
&lt;p>Once identified, the solution is conceptually simple. Like other crypto challenges, there are several implementation pitfalls to avoid when scripting a solution. If you are wise, you&amp;rsquo;ll stick to well-established libraries. See the section on &lt;a href="https://4wayhandshake.github.io/ctf/baby-time-capsule/#scripting">scripting&lt;/a> for more details of how I wrote the solution.&lt;/p></description></item><item><title>Honor Among Thieves</title><link>https://4wayhandshake.github.io/ctf/honor-among-thieves/</link><pubDate>Tue, 20 Feb 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/honor-among-thieves/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a continuation of the previous one, &lt;a href="https://4wayhandshake.github.io/ctf/distract-and-destroy/">Distract and Destroy&lt;/a>. Our main character, Alex, now has two others in her party. Their objective is to somehow gain the key to the treasure (the flag) by eavesdropping on a rival party.&lt;/p>
&lt;p>Since a lot of the setup was done in the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/">first challenge of the series&lt;/a>, I won&amp;rsquo;t be covering it again. Please see the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/#setup">Setup&lt;/a> section of that walkthrough for more detail.&lt;/p></description></item><item><title>The Last Dance</title><link>https://4wayhandshake.github.io/ctf/the-last-dance/</link><pubDate>Tue, 20 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/the-last-dance/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>The Last Dance&lt;/em> is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. It is an example of a very common cryptography lesson that illustrates why you &lt;em>should never re-use the same key when encrypting two messages&lt;/em>. In this case, the &amp;ldquo;key&amp;rdquo; is actually a key/nonce pair, but that&amp;rsquo;s irrelevant to the solution. By recognizing three things, the player should find a solution pretty quickly:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;CHACHA20&amp;rdquo; is a stream cipher.&lt;/li>
&lt;li>It utilizes XOR (which is reversible) to encrypt and decrypt.&lt;/li>
&lt;li>The same key (and nonce) were used to encrypt two messages, with known plaintext for one of them.&lt;/li>
&lt;/ul>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>This challenge provides two files: a python script and a text file with three lines hex data. It looks like the python script, &lt;code>source.py&lt;/code>, was used to generate the encrypted text, &lt;code>out.txt&lt;/code>.&lt;/p></description></item><item><title>Distract and Destroy</title><link>https://4wayhandshake.github.io/ctf/distract-and-destroy/</link><pubDate>Sat, 17 Feb 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/distract-and-destroy/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a continuation of the previous one, &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/">Survival of the Fittest&lt;/a>. Our main character, Alex, is now accompanied by another person in her party (who I&amp;rsquo;m calling &amp;ldquo;Brock&amp;rdquo;, &lt;em>a la&lt;/em> alice-and-bob). The title, &lt;em>Distract and Destroy&lt;/em>, is a pretty huge hint in how this one will need to be solved.&lt;/p>
&lt;p>Since a lot of the setup was done in the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/">last challenge&lt;/a>, I won&amp;rsquo;t be covering it again. Please see the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/#setup">Setup&lt;/a> section of my other walkthrough for more detail.&lt;/p></description></item><item><title>Survival of the Fittest</title><link>https://4wayhandshake.github.io/ctf/survival-of-the-fittest/</link><pubDate>Fri, 16 Feb 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/survival-of-the-fittest/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Starting up the challenge, it looks like a cute little web-based side scrolling RPG. The interface is limited to just &lt;code>Attack&lt;/code> and &lt;code>Restart&lt;/code>. Despite it&amp;rsquo;s simple appearance, this challenge is actually hosting a private blockchain, where the game is running as a distributed app. The goal is simple: kill the monsters.&lt;/p>
&lt;blockquote>
&lt;p>This was my first blockchain challenge. Even though the challenge itself was very very easy, I was quite confused about how to set up the &lt;code>hardhat&lt;/code> environment. I&amp;rsquo;m writing this walkthrough in the hopes that others won&amp;rsquo;t have to stumble over the same issues that I did.&lt;/p></description></item><item><title>baby todo or not todo</title><link>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a docker container, coming packaged with a zip of all of the whole docker container (it&amp;rsquo;s a &amp;ldquo;white box&amp;rdquo; challenge.)&lt;/p>
&lt;p>Open up the source code and read through it, get a sense of how the app is supposed to work. The name of the folder indicates &amp;ldquo;broken authentication control&amp;rdquo;, so that&amp;rsquo;s probably where this is headed.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>The db file &lt;strong>schema.sql&lt;/strong> is the first file to read. I find it&amp;rsquo;s easiest to get a handle on how an app works if you can see how the data is stored. The schema reveals what we should find once we do open the database. Once the website is running, the flag will be present in the table &lt;strong>todos&lt;/strong> (in the &lt;strong>name&lt;/strong> field) with assignee = admin&lt;/p></description></item><item><title>baby WAFfles order</title><link>https://4wayhandshake.github.io/ctf/baby-waffles-order/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-waffles-order/</guid><description>&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Download the challenge files: it is a docker, showing you the source code for the whole challenge.&lt;/p>
&lt;blockquote>
&lt;p>Obvious hint: the title of the website is &lt;strong>&lt;u>xxe&lt;/u>&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/baby-waffles-order/screenshot.png" alt="screenshot">&lt;/p>
&lt;p>Read all the source code, understand how the web app works. In essence, the challenge is an order-taking API for a fictional restaurant, taking orders for either &lt;strong>Ice Scream&lt;/strong> or &lt;strong>WAFfles&lt;/strong>. Orders may be submitted to /api/order as:&lt;/p>
&lt;ul>
&lt;li>application/json&lt;/li>
&lt;li>application/xml&lt;/li>
&lt;/ul>
&lt;h2 id="converting-request-to-xml">CONVERTING REQUEST TO XML&lt;/h2>
&lt;p>It appears that the website is configured to submit orders as json, but the endpoint will still accept xml. Try running the docker and interacting with it: submit an order and catch the request in Burp. The POST will have content-type application/json, but go ahead and convert it to the equivalent XML request:&lt;/p></description></item><item><title>Phonebook</title><link>https://4wayhandshake.github.io/ctf/phonebook/</link><pubDate>Wed, 30 Jun 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/phonebook/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At the time of writing this walkthrough, &lt;em>Phonebook&lt;/em> is currently active (Oct 2021) and worth 30 points.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>I started up the challenge and visited the website. It is a small login form.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/phonebook/start.png" alt="start">&lt;/p>
&lt;p>Looks pretty typical. Checking the source code for another look reveals a conspicuous little script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">queryString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> window.&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">queryString&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">urlParams&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">URLSearchParams&lt;/span>(&lt;span style="color:#a6e22e">queryString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">urlParams&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;message&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">visibility&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;visible&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What could be the point of this? I tried navigating to http://139.59.183.98:31487/login?message=What%20can%20go%20here. Lo and behold:&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Very Easy on 4wayhandshake</title><link>https://4wayhandshake.github.io/categories/very-easy/</link><description>Recent content in Very Easy on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 16 Jan 2025 12:49:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/categories/very-easy/index.xml" rel="self" type="application/rss+xml"/><item><title>Spookifier</title><link>https://4wayhandshake.github.io/ctf/spookifier/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spookifier/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Spookifier&lt;/em> is an excellent introduction to a very fun class of web vulnerabilities. It makes for a nice little &amp;ldquo;coffee break&amp;rdquo; challenge. Perfect if you don&amp;rsquo;t have much time.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Start by downloading the files. It&amp;rsquo;s a docker container with a Flask application inside. Read the code, and realize there&amp;rsquo;s only one endpoint inside.&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;strong>Python Flask&lt;/strong> server and uses &lt;strong>Mako&lt;/strong> as a template engine.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/spookifier/challenge%20dir.png" alt="challenge dir">&lt;/p></description></item><item><title>Spookypass</title><link>https://4wayhandshake.github.io/ctf/spookypass/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spookypass/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Super easy challenge. This challenge introduces a beginner at reversing into opening their tools and checking inside a file.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Start by downloading the file. We can check &lt;code>file&lt;/code> to see the file type:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>./pass: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3008217772cc2426c643d69b80a96c715490dd91, for GNU/Linux 4.4.0, not stripped&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>Try running the executable. It presents you with a simple prompt, asking the password:&lt;/p></description></item><item><title>Simple Encryptor</title><link>https://4wayhandshake.github.io/ctf/simple-encryptor/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/simple-encryptor/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is about decrypting a file that was created with a flawed form of encryption. We are provided the encrypted file, and also the encryption program. The program can easily be disassembled to examine how it functions. The code is very small, and thankfully the vulnerability is easy to locate. However, even after locating the flaw, a proper solution requires a little bit of C coding, which can be somewhat daunting.&lt;/p></description></item><item><title>Baby Time Capsule</title><link>https://4wayhandshake.github.io/ctf/baby-time-capsule/</link><pubDate>Wed, 21 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-time-capsule/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Baby Time Capsule&lt;/em> is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. Personally, I am not accustomed to crypto challenges, and found this one a lot more difficult than &amp;ldquo;very easy&amp;rdquo;. However, the solution only requires a very textbook attack. Anyone well-versed with RSA already should find it relatively simple.&lt;/p>
&lt;p>Once identified, the solution is conceptually simple. Like other crypto challenges, there are several implementation pitfalls to avoid when scripting a solution. If you are wise, you&amp;rsquo;ll stick to well-established libraries. See the section on &lt;a href="https://4wayhandshake.github.io/ctf/baby-time-capsule/#scripting">scripting&lt;/a> for more details of how I wrote the solution.&lt;/p></description></item><item><title>The Last Dance</title><link>https://4wayhandshake.github.io/ctf/the-last-dance/</link><pubDate>Tue, 20 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/the-last-dance/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>The Last Dance&lt;/em> is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. It is an example of a very common cryptography lesson that illustrates why you &lt;em>should never re-use the same key when encrypting two messages&lt;/em>. In this case, the &amp;ldquo;key&amp;rdquo; is actually a key/nonce pair, but that&amp;rsquo;s irrelevant to the solution. By recognizing three things, the player should find a solution pretty quickly:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;CHACHA20&amp;rdquo; is a stream cipher.&lt;/li>
&lt;li>It utilizes XOR (which is reversible) to encrypt and decrypt.&lt;/li>
&lt;li>The same key (and nonce) were used to encrypt two messages, with known plaintext for one of them.&lt;/li>
&lt;/ul>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>This challenge provides two files: a python script and a text file with three lines hex data. It looks like the python script, &lt;code>source.py&lt;/code>, was used to generate the encrypted text, &lt;code>out.txt&lt;/code>.&lt;/p></description></item><item><title>Distract and Destroy</title><link>https://4wayhandshake.github.io/ctf/distract-and-destroy/</link><pubDate>Sat, 17 Feb 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/distract-and-destroy/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a continuation of the previous one, &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/">Survival of the Fittest&lt;/a>. Our main character, Alex, is now accompanied by another person in her party (who I&amp;rsquo;m calling &amp;ldquo;Brock&amp;rdquo;, &lt;em>a la&lt;/em> alice-and-bob). The title, &lt;em>Distract and Destroy&lt;/em>, is a pretty huge hint in how this one will need to be solved.&lt;/p>
&lt;p>Since a lot of the setup was done in the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/">last challenge&lt;/a>, I won&amp;rsquo;t be covering it again. Please see the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/#setup">Setup&lt;/a> section of my other walkthrough for more detail.&lt;/p></description></item><item><title>Survival of the Fittest</title><link>https://4wayhandshake.github.io/ctf/survival-of-the-fittest/</link><pubDate>Fri, 16 Feb 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/survival-of-the-fittest/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Starting up the challenge, it looks like a cute little web-based side scrolling RPG. The interface is limited to just &lt;code>Attack&lt;/code> and &lt;code>Restart&lt;/code>. Despite it&amp;rsquo;s simple appearance, this challenge is actually hosting a private blockchain, where the game is running as a distributed app. The goal is simple: kill the monsters.&lt;/p>
&lt;blockquote>
&lt;p>This was my first blockchain challenge. Even though the challenge itself was very very easy, I was quite confused about how to set up the &lt;code>hardhat&lt;/code> environment. I&amp;rsquo;m writing this walkthrough in the hopes that others won&amp;rsquo;t have to stumble over the same issues that I did.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Easy on 4wayhandshake</title><link>https://4wayhandshake.github.io/categories/easy/</link><description>Recent content in Easy on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 13 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/categories/easy/index.xml" rel="self" type="application/rss+xml"/><item><title>CDNio</title><link>https://4wayhandshake.github.io/ctf/cdnio/</link><pubDate>Tue, 13 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/cdnio/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>The challenge is involves a strange little webserver (using &lt;code>Flask&lt;/code> running on &lt;code>Gunicorn&lt;/code>) positioned behind a caching proxy (using Nginx). There is some kind of &lt;code>bot&lt;/code> mechanism for crawling the site. Aside from the bot, the only relevant URLs are for:&lt;/p>
&lt;ul>
&lt;li>registration&lt;/li>
&lt;li>login&lt;/li>
&lt;li>retrieving our own profile&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;re free to register a user, then access our own profile info.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/cdnio/registration%20page.png" alt="registration page">&lt;/p>
&lt;p>We can also access our own profile info. Presumably the feature to retrieve our profile is for the sake of accessing our API key?​&lt;/p></description></item><item><title>Spellbound Servants</title><link>https://4wayhandshake.github.io/ctf/spellbound-servants/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spellbound-servants/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>I&amp;rsquo;m not quite sure about the description on this one&amp;hellip; To me, it just looks like a partially-finished storefront &amp;#x1f602;&lt;/p>
&lt;p>As long as you don&amp;rsquo;t get too bogged-down with all the Flask-related code, this challenge is really easy. A bit of code analysis leads directly to the solution, which involves only a single step of deserialization to accomplish. Besides the vulnerability, this challenge presents a great example of writing a clean &amp;amp; tidy Flask server.&lt;/p></description></item><item><title>C O P</title><link>https://4wayhandshake.github.io/ctf/c-o-p/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/c-o-p/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>C O P&lt;/em> (Cult of Pickles) is an Easy web challenge, involving requireing equal portions of SQLi, and deserialization, and brine. The challenge is a very minimal web app, demonstrating a bit of a &amp;ldquo;toy problem&amp;rdquo; with SQLi arising from a failure to use SQL prepared statements and sloppy Flask+Jinja2 templating code.&lt;/p>
&lt;p>Achieving actual RCE is a bit challenging, but mostly because of a very strange issue. Formulation of your attack steps and writing the exploit is not too bad. Be sure to read my &lt;a href="https://4wayhandshake.github.io/ctf/c-o-p/#finish-the-exploit-script">warnings&lt;/a> within the Exploit section to avoid my pitfalls.&lt;/p></description></item><item><title>POP Restaurant</title><link>https://4wayhandshake.github.io/ctf/pop-restaurant/</link><pubDate>Mon, 22 Jan 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/pop-restaurant/</guid><description>&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/pop-restaurant/login%20page.png" alt="login page">&lt;/p>
&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>POP Restaurant&lt;/em>, by @&lt;a href="https://app.hackthebox.com/users/1051133">khanhhnahk1&lt;/a>, is an excellent demonstration of why secure coding practices are important. As is hinted by the name, we utilize a PHP &lt;em>POP chain&lt;/em> to execute arbitrary PHP on the target.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>&amp;#x1f60d; This UI is &lt;em>adorbs&lt;/em>.&lt;/p>
&lt;p>It&amp;rsquo;s a PHP-based web app. Besides the database interfacing code, everything looks like it&amp;rsquo;s entirely custom.&lt;/p>
&lt;p>We can register a user, then start placing &amp;ldquo;orders&amp;rdquo; to the restaurant. We can order pizza, icecream, or spaghetti. Once we click one of the order buttons, our order appears in the pane below:&lt;/p></description></item><item><title>LinkVortex</title><link>https://4wayhandshake.github.io/walkthrough/linkvortex/</link><pubDate>Wed, 17 Jan 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/linkvortex/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>LinkVortex&lt;/em> was all about the recon steps. A little bit of OSINT with a portion of web fuzzing is all that it takes. First though, we must discover the technology that the target website runs on, do a little reading on how it works, and make some educated guesses about directory structure: only then will we find the dashboard login. On the dashboard login, we discover a username oracle. Finally, after finding a vulnerable subdomain, we are able to do some &lt;code>.git&lt;/code> reconstruction to obtain some hardcoded credentials in the source code. Combining all of those clues together, we can finally gain access to the dashboard.&lt;/p></description></item><item><title>UnderPass</title><link>https://4wayhandshake.github.io/walkthrough/underpass/</link><pubDate>Tue, 16 Jan 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/underpass/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>UnderPass&lt;/em> was a nice, quick and cheerful box. A perfect choice if you have limited time but feel the itch to hack something. Kudos to the box creator, &lt;em>@dakkmaddy&lt;/em>, for putting together this treat. It was released between Season 6 and 7.&lt;/p>
&lt;p>Recon was pleasant, and a great reminder to always include some UDP scanning (even if it usually isn&amp;rsquo;t very useful). It was a mixture of OSINT, Web enumeration, and SNMP. After gathering sufficient clues, it should be pretty easy to locate the correct service to attack. Hopefully, research already turned up some default credentials for the vulnerable service, because that&amp;rsquo;s what lets you into the dashboard.&lt;/p></description></item><item><title>EscapeTwo</title><link>https://4wayhandshake.github.io/walkthrough/escapetwo/</link><pubDate>Sun, 14 Jan 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/escapetwo/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Alright! Here comes Season 7, &lt;em>Vice&lt;/em>. Our first box is Windows, rated Easy. Right away, it&amp;rsquo;s important to note that we&amp;rsquo;re provided a credential for this one, for the &lt;code>rose&lt;/code> account. With this credential, we successfully accessed SMB shares on the &lt;code>sequel.htb&lt;/code> server finding the &lt;code>Accounting Department&lt;/code> which contained garbled spreadsheets that, when opened as archives and read as raw XML, revealed a list of names and credentials. One of these credentials gave access to MS-SQL, that had &lt;code>xp_cmdshell&lt;/code> enabled - providing us a foothold of RCE.&lt;/p></description></item><item><title>Forest</title><link>https://4wayhandshake.github.io/walkthrough/forest/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/forest/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;strong>&lt;em>Forest&lt;/em> is 100% Active Directory&lt;/strong>. If you&amp;rsquo;re like me, a box with no webserver and only AD is a bit like staring at a blank wall - it&amp;rsquo;s hard to know where to start with enumeration. &lt;em>Forest&lt;/em> is fantastic practice to break you out of that mindset, and help understand good methods for attacking AD environments.&lt;/p>
&lt;p>Recon mostly consists of going through checklists of ways to enumerate active directory in an unauthenticated manner. It helps a lot to know a few good methods to try, and see how far that gets you. &lt;em>Forest&lt;/em> was all about being methodical and knowing when you&amp;rsquo;ve found something useful. The only thing we really need to realize during recon is that &lt;strong>Kerberos preauthentication is disabled&lt;/strong>.&lt;/p></description></item><item><title>Chemistry</title><link>https://4wayhandshake.github.io/walkthrough/chemistry/</link><pubDate>Fri, 19 Oct 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/chemistry/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Chemistry&lt;/em> was released as the penultimate box of HTB&amp;rsquo;s season 6, &lt;em>Heist&lt;/em>. It&amp;rsquo;s about breaking into a custom service for analyzing a scientific data file. Maybe you&amp;rsquo;ve seen tools like this before, where some expert in a non-tech field knows just enough coding to solve a problem for themselves? It&amp;rsquo;s admirable that people do this type of thing, but these tools are often doomed by poor security - as we&amp;rsquo;ll see in this box.&lt;/p></description></item><item><title>Sightless</title><link>https://4wayhandshake.github.io/walkthrough/sightless/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/sightless/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Sightless&lt;/em> is the box for week 6 of HTB&amp;rsquo;s Season 6 &lt;em>Heist&lt;/em>. It&amp;rsquo;s a very creative box. While each step of this box is relatively simple, the creator (&lt;strong>EmSec&lt;/strong>) throws many creative challenges at us with this one. There are a few rabbit-holes to watch out for, and it can be easy to feel a little lost while seeking privesc to root. &lt;em>Sightless&lt;/em> requires you to actually work inside some GUI applications, instead of being able to root the box solely through a terminal.&lt;/p></description></item><item><title>GreenHorn</title><link>https://4wayhandshake.github.io/walkthrough/greenhorn/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/greenhorn/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>GreenHorn&lt;/em> was introduced in the time between the fifth and sixth HTB seasons. It&amp;rsquo;s about a web development company that prides itself on hiring very inexperienced developers. Thankfully for us, the boss also has very bad security practices &amp;#x1f602;&lt;/p>
&lt;p>Recon is very fast. First, recognize that there are two ports to investigate: both ports 80 and 3000 are running HTTP servers. Check them both out before doing anything else. As it turns out, one of them is hosting a git repo for the other - so finding critical sensitive details is very easy. Accessing the service on port 80, we can get a version number of the software being used. Some quick searching should lead to a CVE and a number of PoC exploits for it. Exploit the known vulnerability to gain a foothold on the system.&lt;/p></description></item><item><title>Sea</title><link>https://4wayhandshake.github.io/walkthrough/sea/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/sea/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Sea&lt;/em> was released as the second box of HTB&amp;rsquo;s Season 6, &lt;em>Heist&lt;/em>. With proper recon, it&amp;rsquo;s a very short box. Perhaps they will fix it after the season ends, but this box actually comes pre-exploited: to gain foothold, all you have to do is find the exploit and use it. It&amp;rsquo;s totally doable to figure out how to exploit it yourself though - that&amp;rsquo;s the method that I&amp;rsquo;ll outline in this walkthrough.&lt;/p></description></item><item><title>PermX</title><link>https://4wayhandshake.github.io/walkthrough/permx/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/permx/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>PermX&lt;/em> is about exploiting a learning management system called &lt;em>Chamilo&lt;/em>. The box was pretty easy, and shouldn&amp;rsquo;t take long to finish.&lt;/p>
&lt;p>Recon mostly involves uncovering a couple subdomains. One of them is the usual, obvious subdomain, but the other is a bit more odd. Accessing the &amp;ldquo;more odd&amp;rdquo; subdomain allows you to know the name of the CMS you&amp;rsquo;re up against. Applying a little directory enumeration will reveal that you can actually access several directories in &amp;ldquo;file browser&amp;rdquo; mode, basically eliminating the need to do any file enumeration. One of these files will reveal the exact version of the CMS.&lt;/p></description></item><item><title>PDFy</title><link>https://4wayhandshake.github.io/ctf/pdfy/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/pdfy/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>PDFy&lt;/em> is a web challenge by the prolific @makelaris. It&amp;rsquo;s about exploiting a known vulnerability in the &lt;code>wkhtmltopdf&lt;/code> application - a solution for parsing HTML and printing it into a PDF using a built-in stylesheet. Since we know the goal of this challenge was to disclose a file, it&amp;rsquo;s not overly challenging to find a vulnerability to suit our needs.&lt;/p>
&lt;p>By far, the biggest obstacle on &lt;em>PDFy&lt;/em> is overcoming the lack of a VPN connection. This one requires you to host a resource on the public internet - something that has been a huge roadblock for me in the past, on other challenges and CTF competitions. This challenge forced me to explore what tools exist for getting around the lack of VPN (without using a leased VPS). Ultimately, I settled on a paid subscription to &lt;strong>Pinggy&lt;/strong>, which I&amp;rsquo;m glad I got.&lt;/p></description></item><item><title>BoardLight</title><link>https://4wayhandshake.github.io/walkthrough/boardlight/</link><pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/boardlight/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>BoardLight&lt;/em> was the 6th box in HTB&amp;rsquo;s Season V &lt;em>Anomalies&lt;/em>. It&amp;rsquo;s an easy Linux box, focused on a web hosting platform. As far as I can tell, its name and icon have nothing to do with the box itself. Unfortunately, I was away when the box was released, and kicking myself for it - it would have been great to have such easy points on the scoreboard!&lt;/p>
&lt;p>Recon is very quick. &lt;code>Whatweb&lt;/code> reveals the domain of the target, and a quick scan for subdomains will reveal the vulnerable web app. From there, default credentials grant you entry to the web app dashboard. While the dashboard itself isn&amp;rsquo;t immediately useful, the credentials are helpful for the Authenticated RCE exploit that you can apply to the web app to gain a foothold.&lt;/p></description></item><item><title>Editorial</title><link>https://4wayhandshake.github.io/walkthrough/editorial/</link><pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/editorial/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Editorial&lt;/em> was released for week 9 of HTB&amp;rsquo;s Season V: &lt;em>Anomalies&lt;/em>. With only three steps involved in its solution, it&amp;rsquo;s one of the easiest boxes in the season so far. That being said, twice on this box I ended up kicking myself for having not done something that later seemed obvious, so perhaps &lt;em>Editorial&lt;/em> teaches us a lesson in a more subtle way.&lt;/p>
&lt;p>There is basically no recon involved in &lt;em>Editorial&lt;/em>. Identify the ports, add the domain to your &lt;code>/etc/hosts&lt;/code>, and explore the website. The website only has three pages, so you&amp;rsquo;ll quickly locate the component to attack. From there, you&amp;rsquo;ll find out that this component can be used for SSRF. Follow &lt;a href="https://4wayhandshake.github.io/strategy/ssrf/">my SSRF checklist&lt;/a> (Disclaimer: it&amp;rsquo;s a work-in-progress) to expedite things a little. Once you interact with the internally-accessible server via the SSRF, you&amp;rsquo;ll quickly discover some credentials. Use those to gain a foothold.&lt;/p></description></item><item><title>Mailing</title><link>https://4wayhandshake.github.io/walkthrough/mailing/</link><pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/mailing/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Mailing&lt;/em> was released as the third box of HTB&amp;rsquo;s Season 5, &lt;em>Anomalies&lt;/em>. The box is initially about a mail server (although that ceases to be important after a foothold is achieved).&lt;/p>
&lt;p>To gain a foothold, you need to make some major assumptions using a &amp;ldquo;guess and check&amp;rdquo; procedure that is not easily automated. The foothold is possible by means of exploiting a CVE for an application that you can&amp;rsquo;t be sure is even running on the target. Moreover, the exploit requires user interaction, which you can&amp;rsquo;t be sure is even happening.&lt;/p></description></item><item><title>Usage</title><link>https://4wayhandshake.github.io/walkthrough/usage/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/usage/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Usage&lt;/em> was released in the short period between HTB&amp;rsquo;s Season 4 and Season 5. The target is a server hosting a small blog and a set of administrative tools to manage the server. Also, the target features pretty cool little monitoring tool called &lt;strong>Monit&lt;/strong>, and seemingly also clamAV (although it didn&amp;rsquo;t factor into the attack).&lt;/p>
&lt;p>Foothold is the hardest part of &lt;em>Usage&lt;/em>. After carefully examining the target and doing web enumeration on it, one only comes to the conclusion that the attack surface is quite small. However, the few interactive elements that are present do indeed have a vulnerability. It&amp;rsquo;s surprising, considering the site runs on Laravel, but the password reset form can be exploited through SQL injection. Some careful usage of &lt;code>sqlmap&lt;/code> will do wonders here.&lt;/p></description></item><item><title>Crafty</title><link>https://4wayhandshake.github.io/walkthrough/crafty/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/crafty/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Crafty&lt;/em> is an easy-rated Windows box, released for week 6 of HTB&amp;rsquo;s Season IV &lt;em>Savage Lands&lt;/em>. This box centers around exploitation of &lt;code>log4j&lt;/code> - maybe you&amp;rsquo;ve heard of it &amp;#x1f602; It was a really big deal in 2021. While the disaster that ensued caused heaps of damage, &lt;em>very little actually changed&lt;/em> as a result of its occurrence. If anything can be said for it, at least it stoked the international dialog on supply-chain attacks and &lt;em>the failing health of the open-source ecosystem&lt;/em>.&lt;/p></description></item><item><title>Insomnia</title><link>https://4wayhandshake.github.io/ctf/insomnia/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/insomnia/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Insomnia&lt;/em> is a web challenge about bypassing a login mechanism. All source code is provided, and proper analysis of the code will yield the solution. It took me longer than I care to admit to solve this one, but frankly this challenge is more on the easier side of &amp;ldquo;Easy&amp;rdquo;. Anyone that has any experience programming an authentication mechanism will see the flaw with minimal effort. Once it&amp;rsquo;s found, exploiting this flaw is trivial, and the flag can be obtained in a single web request.&lt;/p></description></item><item><title>Headless</title><link>https://4wayhandshake.github.io/walkthrough/headless/</link><pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/headless/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>The penultimate box of HTB&amp;rsquo;s Season IV &lt;em>Savage Lands&lt;/em>, released for week 12, is &lt;em>Headless&lt;/em>. While I haven&amp;rsquo;t really been participating in the season, this is one of the few boxes that I attempted within the 1 week limit. It was totally worth it! This box is an absolute delight, and I can&amp;rsquo;t recommend it enough. There aren&amp;rsquo;t any rabbit-holes on this one, and most of the effort will simply be to gain a foothold. It&amp;rsquo;s a quick box that reinforces some good hacking fundamentals.&lt;/p></description></item><item><title>Perfection</title><link>https://4wayhandshake.github.io/walkthrough/perfection/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/perfection/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Perfection&lt;/em> was released as the 9th box of HTB&amp;rsquo;s Season IV, &amp;ldquo;Savage Lands&amp;rdquo;, but I&amp;rsquo;m coming to it two weeks late. I really enjoyed this box, even though it was quite easy. I always appreciate when the box creator builds a little bit of a narrative around the box: in this case, we were dealing with a small school and the interaction between two people (shown on the About Us page) regarding the school&amp;rsquo;s computer systems. There weren&amp;rsquo;t too many distractions on this one: if you know what you&amp;rsquo;re looking at, the solution for all steps should be readily apparent.&lt;/p></description></item><item><title>Love</title><link>https://4wayhandshake.github.io/walkthrough/love/</link><pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/love/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>It&amp;rsquo;s been a week, but now it&amp;rsquo;s time to get back into my “Let’s brush up on Windows!” series. &lt;em>Love&lt;/em> is the fifth box, following &lt;a href="https://4wayhandshake.github.io/walkthrough/toolbox/">&lt;em>Toolbox&lt;/em>&lt;/a>. This box was pretty interesting, definitely worth checking out. I really enjoyed that it avoided the whole &amp;ldquo;Find the CVE and exploit it&amp;rdquo; pattern that many Easy boxes use.&lt;/p>
&lt;p>It revolves around a &amp;ldquo;File Scanner&amp;rdquo; web app with some terrible security misconfigurations and mistakes. Can you find them all?&lt;/p></description></item><item><title>Honor Among Thieves</title><link>https://4wayhandshake.github.io/ctf/honor-among-thieves/</link><pubDate>Tue, 20 Feb 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/honor-among-thieves/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a continuation of the previous one, &lt;a href="https://4wayhandshake.github.io/ctf/distract-and-destroy/">Distract and Destroy&lt;/a>. Our main character, Alex, now has two others in her party. Their objective is to somehow gain the key to the treasure (the flag) by eavesdropping on a rival party.&lt;/p>
&lt;p>Since a lot of the setup was done in the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/">first challenge of the series&lt;/a>, I won&amp;rsquo;t be covering it again. Please see the &lt;a href="https://4wayhandshake.github.io/ctf/survival-of-the-fittest/#setup">Setup&lt;/a> section of that walkthrough for more detail.&lt;/p></description></item><item><title>Toolbox</title><link>https://4wayhandshake.github.io/walkthrough/toolbox/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/toolbox/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Continuing on with my “Let’s brush up on Windows!” series, &lt;em>Toolbox&lt;/em> is the fourth box. For the previous one, see &lt;a href="https://4wayhandshake.github.io/walkthrough/buff/">my walkthrough on &lt;em>Buff&lt;/em>&lt;/a>. Unfortunately, while this box was advertised as Windows, &lt;em>it&amp;rsquo;s actually 100% Linux&lt;/em>. Yes, a little disappointing, but it&amp;rsquo;s still good practice. It might not seem like it right away, but if you have some experience with &lt;code>sqlmap&lt;/code>, then &lt;em>Toolbox&lt;/em> will be a breeze.&lt;/p>
&lt;p>Recon was very short; you are only meant to find one thing, and it appears right away. To gain a foothold, just apply a little &lt;em>ffuf-fu&lt;/em> and &lt;code>sqlmap&lt;/code> will bridge the gap. The foothold brings you straight to the user flag. From there, take a moment to fingerprint the system in front of you: a little bit of research about the system goes a long way. If you want to finish up quickly, you don&amp;rsquo;t even need to pwn the system to gain the root flag.&lt;/p></description></item><item><title>Codify</title><link>https://4wayhandshake.github.io/walkthrough/codify/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/codify/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Codify&lt;/em> is an easy-rated Linux box that demonstrates just how badly things can go when producing small / indie web apps in the NodeJS environment. In the modern context of tech leaning heavily on open-source projects, Codify highlights an increasingly relevant issue: &lt;em>how do we deal with open-source dependencies when those packages go stale, unmaintained, or otherwise EOL?&lt;/em> While this box was especially easy, it was an absolute delight to solve.&lt;/p></description></item><item><title>Buff</title><link>https://4wayhandshake.github.io/walkthrough/buff/</link><pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/buff/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Buff&lt;/em> is the third Windows box in my “Let’s brush up on Windows!” series. For the previous one, see &lt;a href="https://4wayhandshake.github.io/walkthrough/netmon/">my walkthrough on &lt;em>Netmon&lt;/em>&lt;/a>. This box houses a web app for a fictional gym / fitness center. It&amp;rsquo;s fairly easy, but requires good Windows enumeration fundamentals. Following any reasonable pentest checklist will secure a victory on this box.&lt;/p>
&lt;p>Recon is fairly unimportant with &lt;em>Buff&lt;/em>. Foothold is achieved with hardly more than a few clicks and a CVE, and leads directly to the user flag. The root flag is a little more challenging, requiring some local enumeration on the box and application of another CVE. The solution is fairly straightforward: just stick to your checklists and you&amp;rsquo;ll grab that root flag quickly.&lt;/p></description></item><item><title>Netmon</title><link>https://4wayhandshake.github.io/walkthrough/netmon/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/netmon/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Netmon&lt;/em> is the second Windows box in my &amp;ldquo;Let&amp;rsquo;s brush up on Windows!&amp;rdquo; series. For the previous one, see &lt;a href="https://4wayhandshake.github.io/walkthrough/blue/">my walkthrough on &lt;em>Blue&lt;/em>&lt;/a>. This box revolves around a network monitoring tool called &lt;strong>PRTG&lt;/strong>. It&amp;rsquo;s very easy, and a great reintroduction to Windows tools. Recon leads straight into the user flag, skipping any necessity of acquiring a foothold.&lt;/p>
&lt;p>If recon was done properly, there are only a few options to follow when seeking the root flag. Thankfully, these options have very few rabbit-holes. Keep it simple, don&amp;rsquo;t dig in your heels on any particular method, and you&amp;rsquo;ll find yourself in possession of the root flag in no time at all! Just remember: &lt;em>while software and vulnerabilities change all the time, human habits are much less volatile&lt;/em>.&lt;/p></description></item><item><title>Blue</title><link>https://4wayhandshake.github.io/walkthrough/blue/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/blue/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Blue&lt;/em> is a retired Windows box, the first box in my “Let’s brush up on Windows!” series. It ranks as one of the easiest Windows boxes. I&amp;rsquo;m going to do a whole spree of boxes to try to brush up on my Windows technique. In the end, this box was more of an exercise in trying a whole bunch of exploits and dealing with really messed-up python environments.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>tldr;&lt;/strong>
If you&amp;rsquo;re doing this box in 2024 or later, go straight to a more recent version of the exploit. After you finish Recon, &lt;a href="https://4wayhandshake.github.io/walkthrough/blue/#running-eternalblue">just skip right to this part of the walkthrough&lt;/a>.&lt;/p></description></item><item><title>Analytics</title><link>https://4wayhandshake.github.io/walkthrough/analytics/</link><pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/analytics/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At the time of writing this walkthrough, &lt;em>Analytics&lt;/em> is still active. The box centers around a fictional analytics company that provides data analysis services using the infrastructure they&amp;rsquo;re hosting. The company is running a popular open-source analytics / BI platform. This box uses a modern architecture, reflective of how real websites run these days (when they&amp;rsquo;re on-prem).&lt;/p>
&lt;p>For each step of &lt;em>Analytics&lt;/em>, the skill emphasis is placed firmly on &lt;em>enumeration&lt;/em>. Combining effective enumeration skills with some good research is well-rewarded at every step of this box. For this box, foothold, user, and root are each only a single step. Once you research the right things, it should all fall right into your lap. Have some fun with this one; use this opportunity to sharpen your enumeration toolset.&lt;/p></description></item><item><title>Bizness</title><link>https://4wayhandshake.github.io/walkthrough/bizness/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/bizness/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Bizness&lt;/em>, at first glance, is a cheeky satire of the modern business landing page. It&amp;rsquo;s a website for a fictional company called BizNess that seemingly&amp;hellip; well, I can&amp;rsquo;t really tell what they do. They use a lot of fun buzz words though! &amp;#x1f60e; The entry into the server is all about attacking some well-known ERP software.&lt;/p>
&lt;p>Foothold on this box is a breeze. A little bit of enumeration and fingerprinting will lead to near-instantaneous success. Privilege escalation to root, however, is much more difficult. It will require you to enumerate very carefully, finding ways to tackle a system bloated with distracting configuration files, plugins, and log files everywhere. Not only that, but when you finally do find what you need, you&amp;rsquo;ll have to apply solid reasoning to take what you&amp;rsquo;ve found and transform it into escalation.&lt;/p></description></item><item><title>Devvortex</title><link>https://4wayhandshake.github.io/walkthrough/devvortex/</link><pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/devvortex/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Currently, &lt;em>Devvortex&lt;/em> is still active and worth some points. The box revolves around a fictional web development company, and their landing page. A small amount of enumeration and a check for CVEs leads directly to an easy foothold. From there, good fundamentals will allow you to achieve the User flag with ease, then the root flag with even greater ease!&lt;/p>
&lt;p>This box is perfect for anyone looking to get started in HTB, or someone (like me) who wants to renew their skills after a long hiatus. The biggest danger on this box is to accidentally over-think it &amp;#x1f609;&lt;/p></description></item><item><title>CozyHosting</title><link>https://4wayhandshake.github.io/walkthrough/cozyhosting/</link><pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/cozyhosting/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Cozyhosting&lt;/em> was released as the penultimate box of HTB&amp;rsquo;s season II &amp;ldquo;Hackers Clash&amp;rdquo;. The box is set up as a server hosting a &lt;code>Spring Boot&lt;/code> application, with the challenge revolving around exploiting the web app to gain an initial foothold. The box uses common vulnerabilities and is definitely one of the easier boxes of the season.&lt;/p>
&lt;p>Recon for &lt;em>Cozyhosting&lt;/em> was important. A little bit of enumeration will yield a token with which you can hijack an existing session, giving you access to an admin dashboard. The admin dashboard has functionality inside it that can lead directly into a foothold - the only trick is in realizing what&amp;rsquo;s in front of you (Burp will be very useful here). Also, knowing a few tricks for escaping strings for shell command injection might help &amp;#x1f609;.&lt;/p></description></item><item><title>Keeper</title><link>https://4wayhandshake.github.io/walkthrough/keeper/</link><pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/keeper/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Currently, &lt;em>Keeper&lt;/em> is still active. It was released as the ninth box for HTB&amp;rsquo;s &lt;em>Hackers Clash: Open Beta Season II&lt;/em>. &lt;em>Keeper&lt;/em> is a very easy box, but with a few tricks up its sleeve. Personally, I found a few aspects of this box to be a little frustrating, but in retrospect those things that I found frustrating were probably the most realistic parts of the box. While it is marked as a Linux box, you&amp;rsquo;ll need to have a beginner&amp;rsquo;s grasp on some Windows tools to be able to escalate to root.&lt;/p></description></item><item><title>Sau</title><link>https://4wayhandshake.github.io/walkthrough/sau/</link><pubDate>Wed, 24 Jan 2024 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/sau/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At the time of writing this walkthrough, this is still an Active box. It was released as the fourth box for HTB&amp;rsquo;s &lt;em>Hackers Clash: Open Beta Season II&lt;/em>. Sau is an &amp;ldquo;Easy&amp;rdquo; Linux box, named after its creator, &lt;strong>sau123&lt;/strong>. At face value, the box is a server hosting a web-app for collecting and displaying HTTP requests. The user is able to define &amp;ldquo;baskets&amp;rdquo; to catch requests, where the requests and their responses can later be analyzed - including their body and headers. Sau is a well-made easy box, with a straightforward path to the end. The foothold has multiple steps, emphasizing the importance of good enumeration and research. Once foothold is gained, recognition and understanding of the underlying vulnerability will ensure a quick sprint to the root flag.&lt;/p></description></item><item><title>Pilgrimage</title><link>https://4wayhandshake.github.io/walkthrough/pilgrimage/</link><pubDate>Wed, 24 Jan 2024 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/pilgrimage/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At the time of writing this walkthrough, Pilgrimage is still an Active box. It was released as the second box for HTB&amp;rsquo;s &lt;em>Hackers Clash: Open Beta Season II&lt;/em>. The box features a webserver, hosting an application that shrinks images uploaded by the user, halving both the width and height of the image.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/walkthrough/pilgrimage/index.png" alt="index">&lt;/p>
&lt;h2 id="recon">RECON&lt;/h2>
&lt;p>For this box, I&amp;rsquo;m running the same enumeration strategy as the previous box, &lt;a href="https://4wayhandshake.github.io/sandworm/walkthrough.html">Sandworm&lt;/a>. I set up a directory for the box, with a &lt;code>nmap&lt;/code> subdirectory. Then set &lt;code>$RADDR&lt;/code> to my target machine&amp;rsquo;s IP, and scanned it with a simple but broad port scan:&lt;/p></description></item><item><title>MonitorsTwo</title><link>https://4wayhandshake.github.io/walkthrough/monitorstwo/</link><pubDate>Fri, 08 Sep 2023 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/monitorstwo/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Upon initial enumeration, the website hosted on MonitorsTwo is something called &amp;ldquo;Cacti&amp;rdquo;, which appears to be a run-of-the-mill website management panel. However, some searching reveals that it is an open-source tool, which gives more detail about its functionality:&lt;/p>
&lt;blockquote>
&lt;p>Cacti is a complete network graphing solution designed to harness the power of RRDtool&amp;rsquo;s data storage and graphing functionality providing the following features:&lt;/p>
&lt;ul>
&lt;li>Remote and local data collectors&lt;/li>
&lt;li>Device discovery&lt;/li>
&lt;li>Automation of device and graph creation&lt;/li>
&lt;li>Graph and device templating&lt;/li>
&lt;li>Custom data collection methods&lt;/li>
&lt;li>User, group and domain access controls&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;strong>Warning: This walkthrough contains many spoilers.&lt;/strong>
No spoilers will be unexpected if you read the walkthrough sequentially.&lt;/p></description></item><item><title>Traverxec</title><link>https://4wayhandshake.github.io/walkthrough/traverxec/</link><pubDate>Thu, 16 Jul 2020 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/traverxec/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Traverxec is an older box, dating back to 2019, created by a reasonably-famous HTB user named &lt;strong>jkr&lt;/strong>. It prominently features a very minimal webserver called &lt;strong>Nostromo&lt;/strong>. Nostromo is a quick win, reinforcing some key pentesting fundamentals: checking for CVEs and vulnerability recognition while on the local system (after gaining foothold). The procedure for this box is fairly straightforward - a little Linux knowledge will grant the root flag.&lt;/p>
&lt;blockquote>
&lt;p>I wrote this walkthrough before I had figured out a methodical and consistent way to take notes. Please excuse the haphazard formatting and brevity.&lt;/p></description></item><item><title>Busqueda</title><link>https://4wayhandshake.github.io/walkthrough/busqueda/</link><pubDate>Sun, 13 Aug 2023 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/busqueda/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>For folks like myself that have &lt;em>nada espanol&lt;/em>, it turns out &amp;ldquo;&lt;em>busqueda&lt;/em>&amp;rdquo; is Spanish for &amp;ldquo;search&amp;rdquo;. It should be no surprise that this box is a search engine. Or rather, it is an aggregator of several search engines all in one.&lt;/p>
&lt;p>&lt;strong>Warning: This walkthrough contains many spoilers.&lt;/strong>
&lt;strong>No spoilers will be unexpected if you read the walkthrough sequentially.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/walkthrough/busqueda/index%20page.png" alt="index page">&lt;/p>
&lt;h2 id="recon">RECON&lt;/h2>
&lt;p>I followed my typical first steps. I set up a directory for the box, with a &lt;code>nmap&lt;/code> subdirectory. Then set $RADDR to my target machine&amp;rsquo;s IP, and scanned it with my typical nmap &amp;ldquo;init&amp;rdquo; scan:&lt;/p></description></item><item><title>Soccer</title><link>https://4wayhandshake.github.io/walkthrough/soccer/</link><pubDate>Thu, 08 Jun 2023 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/soccer/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At first, the target seems like a half-built Apache server. After a little enumeration, it seems like a single server hosting four website templates: one for music, one for interior design, one for artwork, and one that is generally-applicable.&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s funny, but some of these seem like really nice templates.&lt;/p>&lt;/blockquote>
&lt;p>The real action, as the name of the box suggests, is at the admin panel that manages the templates. It&amp;rsquo;s a site for typical web hosting tasks like managing hosts, editing DNS, adding users, etc.&lt;/p></description></item><item><title>OpenAdmin</title><link>https://4wayhandshake.github.io/walkthrough/openadmin/</link><pubDate>Fri, 04 Sep 2020 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/openadmin/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At first, the target seems like a half-built Apache server. After a little enumeration, it seems like a single server hosting four website templates: one for music, one for interior design, one for artwork, and one that is generally-applicable.&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s funny, but some of these seem like really nice templates.&lt;/p>&lt;/blockquote>
&lt;p>The real action, as the name of the box suggests, is at the admin panel that manages the templates. It&amp;rsquo;s a site for typical web hosting tasks like managing hosts, editing DNS, adding users, etc.&lt;/p></description></item><item><title>Bashed</title><link>https://4wayhandshake.github.io/walkthrough/bashed/</link><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/bashed/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Bashed features an infosec developer&amp;rsquo;s blog. Seemingly, the blog has just one article. That article shows a pretty huge hint for how to complete the box. Bashed is a fairly easy box, but requires a bit of careful observation after obtaining a foothold. As usual, a basic understanding of linux is an asset.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/walkthrough/bashed/blog%20index%20page.png" alt="blog index page">&lt;/p>
&lt;h2 id="recon">RECON&lt;/h2>
&lt;p>I followed my typical first steps. I set up a directory for the box, with a &lt;code>nmap&lt;/code> subdirectory. Then set $RADDR to my target machine&amp;rsquo;s IP, and scanned it with my typical nmap &amp;ldquo;init&amp;rdquo; scan:&lt;/p></description></item><item><title>Lame</title><link>https://4wayhandshake.github.io/walkthrough/lame/</link><pubDate>Tue, 14 Nov 2017 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/lame/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Lame is one of the oldest boxes on HTB. Its solution is very direct: while it is a &amp;ldquo;box&amp;rdquo;, it is actually shorter than many &amp;ldquo;challenges&amp;rdquo;. It is perfect for a beginner, or someone that just wants to brush up on some more introductory pentesting skills.&lt;/p>
&lt;h2 id="recon">RECON&lt;/h2>
&lt;p>I followed my typical first steps. I set up a directory for the box, with a &lt;code>nmap&lt;/code> subdirectory. Then set $RADDR to my target machine&amp;rsquo;s IP, and scanned it with my typical nmap &amp;ldquo;init&amp;rdquo; scan:&lt;/p></description></item><item><title>Precious</title><link>https://4wayhandshake.github.io/walkthrough/precious/</link><pubDate>Sat, 20 May 2023 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/precious/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Precious is an Easy Linux box on HackTheBox, released on November 26, 2022. Its high rating and easy difficulty make it an attactive way to get back into HTB after a short hiatus. It prominently features the Ruby language, and usage of ruby gems - hence the name. While the foothold is fairly straightforward, the path to root takes a bit of thought!&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/walkthrough/precious/index%20page.png" alt="index page">&lt;/p>
&lt;h2 id="recon">RECON&lt;/h2>
&lt;p>[04:00:40] Performing nmap initial scan:&lt;/p></description></item><item><title>RedPanda</title><link>https://4wayhandshake.github.io/walkthrough/redpanda/</link><pubDate>Thu, 09 Mar 2023 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/redpanda/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Red Panda is a hilariously cute website that acts as an index for a bunch of photos of red pandas. The red panda photos each have an author marked on them.&lt;/p>
&lt;p>When a user visits the site, they may use the search bar to view the photos. When they do, it increments a view counter for that photo. Part of the site describes that the author who contributed the photo is then credited on a per-view basis. So not only does the site serve photos, it is also logging and processing the count of views for each photo.&lt;/p></description></item><item><title>Trick</title><link>https://4wayhandshake.github.io/walkthrough/trick/</link><pubDate>Sat, 18 Feb 2023 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/trick/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Trick appears to be a website that is under construction. At first glance, there is no functionality, but a little enumeration will reveal much more. Finding a foothold is not too difficult as long as proper enumeration techniques are followed. While this is an &amp;ldquo;Easy&amp;rdquo; box, the path to root takes a lot of creativity and forethought, and a bit of scripting. You&amp;rsquo;re fighting against a system that is trying to protect itself, but there is a way in!&lt;/p></description></item><item><title>baby todo or not todo</title><link>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a docker container, coming packaged with a zip of all of the whole docker container (it&amp;rsquo;s a &amp;ldquo;white box&amp;rdquo; challenge.)&lt;/p>
&lt;p>Open up the source code and read through it, get a sense of how the app is supposed to work. The name of the folder indicates &amp;ldquo;broken authentication control&amp;rdquo;, so that&amp;rsquo;s probably where this is headed.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>The db file &lt;strong>schema.sql&lt;/strong> is the first file to read. I find it&amp;rsquo;s easiest to get a handle on how an app works if you can see how the data is stored. The schema reveals what we should find once we do open the database. Once the website is running, the flag will be present in the table &lt;strong>todos&lt;/strong> (in the &lt;strong>name&lt;/strong> field) with assignee = admin&lt;/p></description></item><item><title>baby WAFfles order</title><link>https://4wayhandshake.github.io/ctf/baby-waffles-order/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-waffles-order/</guid><description>&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Download the challenge files: it is a docker, showing you the source code for the whole challenge.&lt;/p>
&lt;blockquote>
&lt;p>Obvious hint: the title of the website is &lt;strong>&lt;u>xxe&lt;/u>&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/baby-waffles-order/screenshot.png" alt="screenshot">&lt;/p>
&lt;p>Read all the source code, understand how the web app works. In essence, the challenge is an order-taking API for a fictional restaurant, taking orders for either &lt;strong>Ice Scream&lt;/strong> or &lt;strong>WAFfles&lt;/strong>. Orders may be submitted to /api/order as:&lt;/p>
&lt;ul>
&lt;li>application/json&lt;/li>
&lt;li>application/xml&lt;/li>
&lt;/ul>
&lt;h2 id="converting-request-to-xml">CONVERTING REQUEST TO XML&lt;/h2>
&lt;p>It appears that the website is configured to submit orders as json, but the endpoint will still accept xml. Try running the docker and interacting with it: submit an order and catch the request in Burp. The POST will have content-type application/json, but go ahead and convert it to the equivalent XML request:&lt;/p></description></item><item><title>Phonebook</title><link>https://4wayhandshake.github.io/ctf/phonebook/</link><pubDate>Wed, 30 Jun 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/phonebook/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At the time of writing this walkthrough, &lt;em>Phonebook&lt;/em> is currently active (Oct 2021) and worth 30 points.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>I started up the challenge and visited the website. It is a small login form.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/phonebook/start.png" alt="start">&lt;/p>
&lt;p>Looks pretty typical. Checking the source code for another look reveals a conspicuous little script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">queryString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> window.&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">queryString&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">urlParams&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">URLSearchParams&lt;/span>(&lt;span style="color:#a6e22e">queryString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">urlParams&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;message&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">visibility&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;visible&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What could be the point of this? I tried navigating to http://139.59.183.98:31487/login?message=What%20can%20go%20here. Lo and behold:&lt;/p></description></item><item><title>Horizontall (images only)</title><link>https://4wayhandshake.github.io/walkthrough/horizontall/</link><pubDate>Thu, 28 Apr 2022 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/walkthrough/horizontall/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This walkthrough is just a series of screenshots showing how I got through the box. 🤷‍♂ I did this box before I really worked out a process for recording my work effectively. Sorry!&lt;/p>
&lt;p>If I find the time, I&amp;rsquo;ll come back to this and try to document it properly.&lt;/p>
&lt;h2 id="walkthrough">Walkthrough&lt;/h2>
&lt;p>These are the notes I left for myself:&lt;/p>
&lt;pre tabindex="0">&lt;code>Found login page at http://api-prod.horizontall.htb/admin/auth/login

I could brute-force the login just with ffuf
Or I could try using the OpenSSH user enumeration CVE to obtain a list of users first?

The successful exploit was from https://github.com/dasithsv/CVE-2019-19609
I simply modified the port, (opened the firewall), set up a nc listener and got a shell
rhost was api-prod.horizontall.htb
lhost was 10.10.14.45
jwt was simply the jwt from my logged-in admin session (got it from firefox web dev tools)
url was http://api-prod.horizontall.htb/
&lt;/code>&lt;/pre>&lt;p>This is the exploit I used:&lt;/p></description></item></channel></rss>
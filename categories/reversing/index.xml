<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reversing on 4wayhandshake</title><link>https://4wayhandshake.github.io/categories/reversing/</link><description>Recent content in Reversing on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 16 Jan 2025 12:49:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/categories/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>Spookypass</title><link>https://4wayhandshake.github.io/ctf/spookypass/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spookypass/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Super easy challenge. This challenge introduces a beginner at reversing into opening their tools and checking inside a file.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Start by downloading the file. We can check &lt;code>file&lt;/code> to see the file type:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>./pass: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3008217772cc2426c643d69b80a96c715490dd91, for GNU/Linux 4.4.0, not stripped&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>Try running the executable. It presents you with a simple prompt, asking the password:&lt;/p></description></item><item><title>Simple Encryptor</title><link>https://4wayhandshake.github.io/ctf/simple-encryptor/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/simple-encryptor/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is about decrypting a file that was created with a flawed form of encryption. We are provided the encrypted file, and also the encryption program. The program can easily be disassembled to examine how it functions. The code is very small, and thankfully the vulnerability is easy to locate. However, even after locating the flaw, a proper solution requires a little bit of C coding, which can be somewhat daunting.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crypto on 4wayhandshake</title><link>https://4wayhandshake.github.io/categories/crypto/</link><description>Recent content in Crypto on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 21 Feb 2024 12:49:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/categories/crypto/index.xml" rel="self" type="application/rss+xml"/><item><title>Baby Time Capsule</title><link>https://4wayhandshake.github.io/ctf/baby-time-capsule/</link><pubDate>Wed, 21 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-time-capsule/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Baby Time Capsule&lt;/em> is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. Personally, I am not accustomed to crypto challenges, and found this one a lot more difficult than &amp;ldquo;very easy&amp;rdquo;. However, the solution only requires a very textbook attack. Anyone well-versed with RSA already should find it relatively simple.&lt;/p>
&lt;p>Once identified, the solution is conceptually simple. Like other crypto challenges, there are several implementation pitfalls to avoid when scripting a solution. If you are wise, you&amp;rsquo;ll stick to well-established libraries. See the section on &lt;a href="https://4wayhandshake.github.io/ctf/baby-time-capsule/#scripting">scripting&lt;/a> for more details of how I wrote the solution.&lt;/p></description></item><item><title>The Last Dance</title><link>https://4wayhandshake.github.io/ctf/the-last-dance/</link><pubDate>Tue, 20 Feb 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/the-last-dance/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>The Last Dance&lt;/em> is a cryptography challenge, rated &amp;ldquo;very easy&amp;rdquo;. It is an example of a very common cryptography lesson that illustrates why you &lt;em>should never re-use the same key when encrypting two messages&lt;/em>. In this case, the &amp;ldquo;key&amp;rdquo; is actually a key/nonce pair, but that&amp;rsquo;s irrelevant to the solution. By recognizing three things, the player should find a solution pretty quickly:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;CHACHA20&amp;rdquo; is a stream cipher.&lt;/li>
&lt;li>It utilizes XOR (which is reversible) to encrypt and decrypt.&lt;/li>
&lt;li>The same key (and nonce) were used to encrypt two messages, with known plaintext for one of them.&lt;/li>
&lt;/ul>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>This challenge provides two files: a python script and a text file with three lines hex data. It looks like the python script, &lt;code>source.py&lt;/code>, was used to generate the encrypted text, &lt;code>out.txt&lt;/code>.&lt;/p></description></item></channel></rss>
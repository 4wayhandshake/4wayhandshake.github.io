<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on 4wayhandshake</title><link>https://4wayhandshake.github.io/categories/web/</link><description>Recent content in Web on 4wayhandshake</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 10 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://4wayhandshake.github.io/categories/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Armaxis</title><link>https://4wayhandshake.github.io/ctf/armaxis/</link><pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/armaxis/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>Starting the challenge, we&amp;rsquo;re given two ports, corresponding to two components: a website and an web-based email client. The website presents a simple login/registration form, and the email client brings us straight into an inbox without any authentication:&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/armaxis/email.png" alt="email">&lt;/p>
&lt;p>A quick skim through the website code suggests that this email client will probably be used for password resets.&lt;/p>
&lt;h2 id="code-analysis">CODE ANALYSIS&lt;/h2>
&lt;p>As usual, I like to read through the code sequentially, starting from startup/initialization code (the &lt;code>Dockerfile&lt;/code>, then &lt;code>index.js&lt;/code>, etc) and ending with the &lt;code>views&lt;/code>. Thankfully, this one didn&amp;rsquo;t take a lot of reading before I discovered a couple vulnerable sections of code &amp;#x1f913;&lt;/p></description></item><item><title>Spellbound Servants</title><link>https://4wayhandshake.github.io/ctf/spellbound-servants/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spellbound-servants/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>I&amp;rsquo;m not quite sure about the description on this one&amp;hellip; To me, it just looks like a partially-finished storefront &amp;#x1f602;&lt;/p>
&lt;p>As long as you don&amp;rsquo;t get too bogged-down with all the Flask-related code, this challenge is really easy. A bit of code analysis leads directly to the solution, which involves only a single step of deserialization to accomplish. Besides the vulnerability, this challenge presents a great example of writing a clean &amp;amp; tidy Flask server.&lt;/p></description></item><item><title>C O P</title><link>https://4wayhandshake.github.io/ctf/c-o-p/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/c-o-p/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>C O P&lt;/em> (Cult of Pickles) is an Easy web challenge, involving requireing equal portions of SQLi, and deserialization, and brine. The challenge is a very minimal web app, demonstrating a bit of a &amp;ldquo;toy problem&amp;rdquo; with SQLi arising from a failure to use SQL prepared statements and sloppy Flask+Jinja2 templating code.&lt;/p>
&lt;p>Achieving actual RCE is a bit challenging, but mostly because of a very strange issue. Formulation of your attack steps and writing the exploit is not too bad. Be sure to read my &lt;a href="https://4wayhandshake.github.io/ctf/c-o-p/#finish-the-exploit-script">warnings&lt;/a> within the Exploit section to avoid my pitfalls.&lt;/p></description></item><item><title>POP Restaurant</title><link>https://4wayhandshake.github.io/ctf/pop-restaurant/</link><pubDate>Mon, 22 Jan 2029 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/pop-restaurant/</guid><description>&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/pop-restaurant/login%20page.png" alt="login page">&lt;/p>
&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>POP Restaurant&lt;/em>, by @&lt;a href="https://app.hackthebox.com/users/1051133">khanhhnahk1&lt;/a>, is an excellent demonstration of why secure coding practices are important. As is hinted by the name, we utilize a PHP &lt;em>POP chain&lt;/em> to execute arbitrary PHP on the target.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>&amp;#x1f60d; This UI is &lt;em>adorbs&lt;/em>.&lt;/p>
&lt;p>It&amp;rsquo;s a PHP-based web app. Besides the database interfacing code, everything looks like it&amp;rsquo;s entirely custom.&lt;/p>
&lt;p>We can register a user, then start placing &amp;ldquo;orders&amp;rdquo; to the restaurant. We can order pizza, icecream, or spaghetti. Once we click one of the order buttons, our order appears in the pane below:&lt;/p></description></item><item><title>Spookifier</title><link>https://4wayhandshake.github.io/ctf/spookifier/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/spookifier/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Spookifier&lt;/em> is an excellent introduction to a very fun class of web vulnerabilities. It makes for a nice little &amp;ldquo;coffee break&amp;rdquo; challenge. Perfect if you don&amp;rsquo;t have much time.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Start by downloading the files. It&amp;rsquo;s a docker container with a Flask application inside. Read the code, and realize there&amp;rsquo;s only one endpoint inside.&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;strong>Python Flask&lt;/strong> server and uses &lt;strong>Mako&lt;/strong> as a template engine.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/spookifier/challenge%20dir.png" alt="challenge dir">&lt;/p></description></item><item><title>PDFy</title><link>https://4wayhandshake.github.io/ctf/pdfy/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/pdfy/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>PDFy&lt;/em> is a web challenge by the prolific @makelaris. It&amp;rsquo;s about exploiting a known vulnerability in the &lt;code>wkhtmltopdf&lt;/code> application - a solution for parsing HTML and printing it into a PDF using a built-in stylesheet. Since we know the goal of this challenge was to disclose a file, it&amp;rsquo;s not overly challenging to find a vulnerability to suit our needs.&lt;/p>
&lt;p>By far, the biggest obstacle on &lt;em>PDFy&lt;/em> is overcoming the lack of a VPN connection. This one requires you to host a resource on the public internet - something that has been a huge roadblock for me in the past, on other challenges and CTF competitions. This challenge forced me to explore what tools exist for getting around the lack of VPN (without using a leased VPS). Ultimately, I settled on a paid subscription to &lt;strong>Pinggy&lt;/strong>, which I&amp;rsquo;m glad I got.&lt;/p></description></item><item><title>HTTP Verb Testing</title><link>https://4wayhandshake.github.io/strategy/http-verb-testing/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/http-verb-testing/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="http-verbs">HTTP Verbs&lt;/h3>
&lt;p>Every HTTP request starts with a single word. 99% of the time, it&amp;rsquo;s either &lt;code>GET&lt;/code> or &lt;code>POST&lt;/code>. If you&amp;rsquo;ve ever programmed a REST API, perhaps you&amp;rsquo;ve also used &lt;code>PUT&lt;/code> and &lt;code>DELETE&lt;/code>. Here&amp;rsquo;s the request your browser made when visiting my website:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">GET&lt;/span> https://4wayhandshake.github.io/ &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">4wayhandshake.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User-Agent&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept-Language&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">en-US,en;q=0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DNT&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connection&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">keep-alive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Upgrade-Insecure-Requests&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-Dest&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">document&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-Mode&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">navigate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-Site&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">none&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-Fetch-User&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">?1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sec-GPC&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The full list of HTTP verbs is as follows:&lt;/p></description></item><item><title>Server-side Request Forgery (SSRF)</title><link>https://4wayhandshake.github.io/strategy/ssrf/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/ssrf/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="why-write-this">Why write this?&lt;/h3>
&lt;p>I often forget small steps about testing SSRF. It&amp;rsquo;d be good to have a checklist to remind myself of things to investigate when I find an opportunity for SSRF.&lt;/p>
&lt;p>This is &lt;em>by no means comprehensive&lt;/em>. If you want a longer and more detailed guide, I recommend the &lt;a href="https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery">Hacktricks page&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmiro.medium.com%2Fv2%2Fresize%3Afit%3A1200%2F1*I_x0DdXYVVl__XtvaCgg3Q.png&amp;amp;f=1&amp;amp;nofb=1&amp;amp;ipt=d77ce114bcb7dcd2c1b10a99a4176d4a2a75da3089753efdc16fa4118cbf4097&amp;amp;ipo=images" alt="SSRF">&lt;/p>
&lt;h2 id="address-filter-bypass">ADDRESS FILTER BYPASS&lt;/h2>
&lt;p>Even if an SSRF vulnerability is present, any half-decent web app will still filter the addresses that can be requested via the SSRFable component. Usually, these constaints are introduced to force the user of the web app to:&lt;/p></description></item><item><title>Insomnia</title><link>https://4wayhandshake.github.io/ctf/insomnia/</link><pubDate>Sat, 23 Jun 2029 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/insomnia/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>&lt;em>Insomnia&lt;/em> is a web challenge about bypassing a login mechanism. All source code is provided, and proper analysis of the code will yield the solution. It took me longer than I care to admit to solve this one, but frankly this challenge is more on the easier side of &amp;ldquo;Easy&amp;rdquo;. Anyone that has any experience programming an authentication mechanism will see the flaw with minimal effort. Once it&amp;rsquo;s found, exploiting this flaw is trivial, and the flag can be obtained in a single web request.&lt;/p></description></item><item><title>cURL Scripting</title><link>https://4wayhandshake.github.io/strategy/curl-scripting/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/curl-scripting/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="why-write-this">Why write this?&lt;/h3>
&lt;blockquote>
&lt;p>Because who needs browsers when you can just &lt;em>pipe curl into bash and parse with grep, sed, and awk&lt;/em> &amp;#x1f639;&lt;/p>&lt;/blockquote>
&lt;p>Sometimes I find myself in a circumstance where I want to do a little bit of automation/scripting with web requests, but I don&amp;rsquo;t feel like writing a whole Python script for it. At least for me, a really common circumstance for me wanting to do this is when I want to automate some kind of login where I encounter a CSRF check.&lt;/p></description></item><item><title>Filter Bypass Techniques</title><link>https://4wayhandshake.github.io/strategy/filter-bypass/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/filter-bypass/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="why-write-this">Why write this?&lt;/h3>
&lt;p>Too often, I&amp;rsquo;ve found myself in a situation where I needed to bypass some kind of filter and wanted a checklist to reference. However, when searching for such a checklist, I encounter two difficulties with the references I find:&lt;/p>
&lt;ul>
&lt;li>Information is far too task-specific. Many are only about XSS filter evasion, or only about WAFs.&lt;/li>
&lt;li>There&amp;rsquo;s just too much. Many of these references have hundreds of different techniques to try. And that&amp;rsquo;s great, if you&amp;rsquo;re trying to hack the Pentagon, but for a Easy-to-Medium HTB box it&amp;rsquo;s way overkill.&lt;/li>
&lt;/ul>
&lt;p>This post is primarily a reference for myself. Consider it a &amp;ldquo;greatest hits&amp;rdquo; collection of filter bypasses that I have personal experiences with. I won&amp;rsquo;t be explaining how they work.&lt;/p></description></item><item><title>Login Forms</title><link>https://4wayhandshake.github.io/strategy/login-forms/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/login-forms/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>The moment you encounter a login form can be magical: there are so many possibilities at your fingertips&amp;hellip; did they leave some &lt;em>default credentials&lt;/em> on the system? Is there an &lt;em>SSRF&lt;/em>? Maybe there&amp;rsquo;s a way to &lt;em>bypass authentication&lt;/em> completely?&lt;/p>
&lt;p>Having so many options can be both a blessing and a curse. It can be a little daunting to have to keep so many techniques in mind, and to keep your eyes open for evidence of the form&amp;rsquo;s vulnerability to each. In an effort to keep your efforts focused and heading in the right direction, I&amp;rsquo;m writing this &lt;a href="https://4wayhandshake.github.io/strategy/">strategy&lt;/a> of my favorite techniques to try on login forms.&lt;/p></description></item><item><title>Web Enumeration</title><link>https://4wayhandshake.github.io/strategy/web-enumeration/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/strategy/web-enumeration/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;h3 id="why-write-this">Why write this?&lt;/h3>
&lt;p>Lately, I&amp;rsquo;ve settled into a pretty good set of web enumeration techniques. As I&amp;rsquo;ve been writing more and more &lt;a href="https://4wayhandshake.github.io/walkthrough/">walkthroughs&lt;/a>, it has started feeling quite repetetive always writing about the same web enumeration strategy. Why not skip that whole song-and-dance, and write it on a separate page that I can link to?&lt;/p>
&lt;p>Most importantly, &lt;em>I like having a convenient reference for myself: it really speeds up recon on a box when you have exactly the right enumeration commands at your fingertips&lt;/em>. This way, I don&amp;rsquo;t have to spend any time formulating the perfect &lt;code>ffuf&lt;/code> command; I can just copy-paste from my previous work.&lt;/p></description></item><item><title>baby todo or not todo</title><link>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-todo-or-not-todo/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>This challenge is a docker container, coming packaged with a zip of all of the whole docker container (it&amp;rsquo;s a &amp;ldquo;white box&amp;rdquo; challenge.)&lt;/p>
&lt;p>Open up the source code and read through it, get a sense of how the app is supposed to work. The name of the folder indicates &amp;ldquo;broken authentication control&amp;rdquo;, so that&amp;rsquo;s probably where this is headed.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>The db file &lt;strong>schema.sql&lt;/strong> is the first file to read. I find it&amp;rsquo;s easiest to get a handle on how an app works if you can see how the data is stored. The schema reveals what we should find once we do open the database. Once the website is running, the flag will be present in the table &lt;strong>todos&lt;/strong> (in the &lt;strong>name&lt;/strong> field) with assignee = admin&lt;/p></description></item><item><title>baby WAFfles order</title><link>https://4wayhandshake.github.io/ctf/baby-waffles-order/</link><pubDate>Mon, 19 Jul 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/baby-waffles-order/</guid><description>&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>Download the challenge files: it is a docker, showing you the source code for the whole challenge.&lt;/p>
&lt;blockquote>
&lt;p>Obvious hint: the title of the website is &lt;strong>&lt;u>xxe&lt;/u>&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/baby-waffles-order/screenshot.png" alt="screenshot">&lt;/p>
&lt;p>Read all the source code, understand how the web app works. In essence, the challenge is an order-taking API for a fictional restaurant, taking orders for either &lt;strong>Ice Scream&lt;/strong> or &lt;strong>WAFfles&lt;/strong>. Orders may be submitted to /api/order as:&lt;/p>
&lt;ul>
&lt;li>application/json&lt;/li>
&lt;li>application/xml&lt;/li>
&lt;/ul>
&lt;h2 id="converting-request-to-xml">CONVERTING REQUEST TO XML&lt;/h2>
&lt;p>It appears that the website is configured to submit orders as json, but the endpoint will still accept xml. Try running the docker and interacting with it: submit an order and catch the request in Burp. The POST will have content-type application/json, but go ahead and convert it to the equivalent XML request:&lt;/p></description></item><item><title>Phonebook</title><link>https://4wayhandshake.github.io/ctf/phonebook/</link><pubDate>Wed, 30 Jun 2021 18:00:00 +0000</pubDate><guid>https://4wayhandshake.github.io/ctf/phonebook/</guid><description>&lt;h2 id="introduction">INTRODUCTION&lt;/h2>
&lt;p>At the time of writing this walkthrough, &lt;em>Phonebook&lt;/em> is currently active (Oct 2021) and worth 30 points.&lt;/p>
&lt;h2 id="first-take">FIRST TAKE&lt;/h2>
&lt;p>I started up the challenge and visited the website. It is a small login form.&lt;/p>
&lt;p>&lt;img src="https://4wayhandshake.github.io/ctf/phonebook/start.png" alt="start">&lt;/p>
&lt;p>Looks pretty typical. Checking the source code for another look reveals a conspicuous little script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">queryString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> window.&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">queryString&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">urlParams&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">URLSearchParams&lt;/span>(&lt;span style="color:#a6e22e">queryString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">urlParams&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;message&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">visibility&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;visible&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What could be the point of this? I tried navigating to http://139.59.183.98:31487/login?message=What%20can%20go%20here. Lo and behold:&lt;/p></description></item></channel></rss>